# Perfect ZSH Configuration Template
# This file contains just the custom functions and configurations
# It can be sourced in your existing .zshrc

# =======================================
# Custom Aliases
# =======================================
# Better defaults
alias ls='eza --icons --group-directories-first'
alias ll='eza -alh --icons --group-directories-first'
alias la='eza -a --icons --group-directories-first'
alias lt='eza --tree --icons -a -I ".git|node_modules|.cache|.venv"'
alias l='eza -lah --icons --group-directories-first'

alias cat='bat --style=plain --paging=never'
alias less='bat --style=plain'

# Quick directory access
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias dev="cd ~/Development"
alias docs="cd ~/Documents"

# =======================================
# Development Functions
# =======================================
# Project analysis
project-info() {
  echo "=== Project Analysis ==="
  echo "Directory: $(pwd)"
  
  if [ -f "package.json" ]; then
    echo "Type: Node.js/JavaScript"
    if [ -f "pnpm-lock.yaml" ]; then
      echo "Package Manager: pnpm"
    elif [ -f "yarn.lock" ]; then
      echo "Package Manager: yarn"
    else
      echo "Package Manager: npm"
    fi
    
    echo -e "\nAvailable scripts:"
    jq -r '.scripts | to_entries[] | "  \(.key): \(.value)"' package.json 2>/dev/null | head -10
    
    [ -f "tsconfig.json" ] && echo -e "\n✓ TypeScript configured"
  fi
  
  [ -f "Cargo.toml" ] && echo "Type: Rust"
  [ -f "go.mod" ] && echo "Type: Go"
  [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] && echo "Type: Python"
  [ -f "composer.json" ] && echo "Type: PHP"
  
  echo -e "\nDevelopment setup:"
  [ -f "docker-compose.yml" ] && echo "  ✓ Docker Compose"
  [ -f ".env.example" ] && echo "  ✓ Environment template"
  [ -f "biome.json" ] && echo "  ✓ Biome formatter"
  [ -d ".github/workflows" ] && echo "  ✓ GitHub Actions"
  [ -f "playwright.config.ts" ] && echo "  ✓ Playwright tests"
}

# Create directory and cd into it
mkcd() {
  mkdir -p "$@" && cd "$_"
}

# Extract archives
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"   ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' cannot be extracted" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# =======================================
# Git Helpers
# =======================================
# Conventional commits
alias gcf='git commit -m "feat: "'
alias gcfx='git commit -m "fix: "'
alias gcd='git commit -m "docs: "'
alias gcs='git commit -m "style: "'
alias gcr='git commit -m "refactor: "'
alias gct='git commit -m "test: "'
alias gcc='git commit -m "chore: "'

# Git workflow helpers
alias gundo='git reset --soft HEAD~1'
alias gamend='git commit --amend --no-edit'
alias gfresh='git fetch --all --prune'
alias gmain='git checkout main || git checkout master'
alias gcleanup='git branch --merged | grep -v "\*\|main\|master" | xargs -n 1 git branch -d'

# =======================================
# Docker Shortcuts
# =======================================
alias dc='docker compose'
alias dcu='docker compose up -d'
alias dcd='docker compose down'
alias dcl='docker compose logs -f'
alias dce='docker compose exec'
alias dcr='docker compose restart'
alias dcp='docker compose ps'
alias dcb='docker compose build'

# Docker cleanup
docker-clean() {
  echo "Cleaning Docker resources..."
  docker compose down --volumes --remove-orphans 2>/dev/null
  docker system prune -af --volumes
  echo "Docker cleanup complete"
}

# =======================================
# FZF Functions
# =======================================
# Project file finder with preview
pf() {
  local file
  file=$(/opt/homebrew/bin/fd --type f --hidden --follow --exclude .git --exclude node_modules \
    | fzf --preview 'bat --style=numbers --color=always --line-range :500 {}' \
          --preview-window=right:60%:wrap)
  [ -n "$file" ] && ${EDITOR:-nvim} "$file"
}

# Interactive project directory navigation
pd() {
  local dir
  dir=$(/opt/homebrew/bin/fd --type d --hidden --follow --exclude .git --exclude node_modules \
    | fzf --preview 'eza --tree --icons --level=2 --color=always {}')
  [ -n "$dir" ] && cd "$dir"
}

# =======================================
# Development Helpers
# =======================================
# Install dependencies smartly
install-deps() {
  if [ -f "pnpm-lock.yaml" ]; then
    pnpm install
  elif [ -f "yarn.lock" ]; then
    yarn install
  elif [ -f "package-lock.json" ]; then
    npm ci
  elif [ -f "package.json" ]; then
    pnpm install
  elif [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
  elif [ -f "Cargo.toml" ]; then
    cargo build
  elif [ -f "go.mod" ]; then
    go mod download
  else
    echo "No recognized dependency file found"
  fi
}

# Run dev server intelligently
devrun() {
  if [ -f "package.json" ]; then
    if jq -e '.scripts.dev' package.json > /dev/null; then
      pnpm dev || npm run dev
    elif jq -e '.scripts.start' package.json > /dev/null; then
      pnpm start || npm start
    elif jq -e '.scripts.serve' package.json > /dev/null; then
      pnpm serve || npm run serve
    else
      echo "No dev script found in package.json"
    fi
  elif [ -f "Cargo.toml" ]; then
    cargo run
  elif [ -f "main.go" ]; then
    go run .
  elif [ -f "manage.py" ]; then
    python manage.py runserver
  else
    echo "No recognized dev command for this project"
  fi
}

# =======================================
# Utility Functions
# =======================================
# Weather
weather() {
  curl "wttr.in/${1:-}"
}

# Cheatsheet
cheat() {
  curl "cheat.sh/$1"
}

# Check port usage
port() {
  lsof -i :$1
}

# Kill process on port
killport() {
  lsof -ti :$1 | xargs kill -9
}